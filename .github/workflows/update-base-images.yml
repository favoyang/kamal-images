# Workflow to automatically update Docker base images
name: Update Base Images

# Run every Sunday at 2 AM UTC (every 7 days)
on:
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:  # Allow manual triggering

# Permissions needed for this workflow
permissions:
  contents: write
  actions: write

# Environment variables
env:
  DOCKER_BUILDKIT: 1

# Jobs to run
jobs:
  # Load configuration from YAML file
  load-config:
    name: Load image configuration
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Load configuration and set matrix
        id: set-matrix
        run: |
          # Install yq to parse YAML
          sudo apt-get update && sudo apt-get install -y yq
          
          # Convert YAML config to JSON matrix
          MATRIX=$(yq -r '.images' .github/config/images.yml | jq -c .)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          
          echo "Loaded configuration:"
          echo "$MATRIX" | jq '.'

  update-images:
    name: Check and update base images
    runs-on: ubuntu-latest
    needs: load-config
    
    strategy:
      matrix:
        include: ${{ fromJson(needs.load-config.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Make script executable
        run: chmod +x scripts/update-base-image.sh

      - name: Check and update base image
        id: update_check
        run: |
          # Run the update script
          OUTPUT=$(./scripts/update-base-image.sh "${{ matrix.name }}" "${{ matrix.base_image }}" "${{ matrix.dockerfile_path }}")
          echo "$OUTPUT"
          
          # Parse script output
          UP_TO_DATE=$(echo "$OUTPUT" | grep "UP_TO_DATE=" | cut -d'=' -f2 || echo "false")
          UPDATE_SUCCESS=$(echo "$OUTPUT" | grep "UPDATE_SUCCESS=" | cut -d'=' -f2 || echo "false")
          CURRENT_VERSION=$(echo "$OUTPUT" | grep "CURRENT_VERSION=" | cut -d'=' -f2 || echo "")
          LATEST_VERSION=$(echo "$OUTPUT" | grep "LATEST_VERSION=" | cut -d'=' -f2 || echo "")
          
          echo "up_to_date=$UP_TO_DATE" >> $GITHUB_OUTPUT
          echo "update_success=$UPDATE_SUCCESS" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Set needs_update for backward compatibility
          if [ "$UP_TO_DATE" = "false" ] && [ "$UPDATE_SUCCESS" = "true" ]; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.update_check.outputs.needs_update == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add ${{ matrix.dockerfile_path }}
          git commit -m "chore: update ${{ matrix.name }} base image to ${{ steps.update_check.outputs.latest_version }}

          - Updated from ${{ steps.update_check.outputs.current_version }} to ${{ steps.update_check.outputs.latest_version }}
          - Automated update via scheduled workflow"

      - name: Push changes
        if: steps.update_check.outputs.needs_update == 'true'
        run: |
          git push origin main

      - name: Trigger build workflow
        if: steps.update_check.outputs.needs_update == 'true'
        run: |
          echo "Triggering build workflow for ${{ matrix.name }}"
          
          # Trigger the specific build workflow
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ matrix.build_workflow }}/dispatches \
            -d '{"ref":"main"}'

      - name: Create summary
        if: steps.update_check.outputs.needs_update == 'true'
        run: |
          echo "## ðŸš€ Base Image Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Update:** ${{ steps.update_check.outputs.current_version }} â†’ ${{ steps.update_check.outputs.latest_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** \`${{ matrix.dockerfile_path }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build Workflow:** Triggered \`${{ matrix.build_workflow }}\`" >> $GITHUB_STEP_SUMMARY

  # Collect results from all image updates
  summary:
    name: Update Summary
    runs-on: ubuntu-latest
    needs: update-images
    if: always()
    
    steps:
      - name: Create overall summary
        run: |
          echo "## ðŸ“‹ Base Image Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scheduled Run:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Note: Individual job summaries will appear above this overall summary
          echo "Check individual job results above for detailed update information." >> $GITHUB_STEP_SUMMARY
